name: Publish to PyPI

on:
    push:
        tags:
            - "v*.*.*" # Trigger on version tags like v1.0.0
    workflow_dispatch: # Allow manual trigger

jobs:
    # First job: Run tests
    test:
        name: Test
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Create virtual environment
              run: uv venv .venv

            - name: Install dependencies
              run: |
                  source .venv/bin/activate
                  uv pip install maturin pytest pytest-cov

            - name: Build and install
              run: |
                  source .venv/bin/activate
                  maturin develop

            - name: Run tests
              run: |
                  source .venv/bin/activate
                  pytest tests/ -v

    # Second job: Build wheels for multiple platforms
    build:
        name: Build wheels
        runs-on: ${{ matrix.os }}
        needs: test
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install maturin
              run: uv pip install maturin

            - name: Build wheels
              run: maturin build --release --strip

            - name: Upload wheels
              uses: actions/upload-artifact@v4
              with:
                  name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
                  path: target/wheels/*.whl

    # Third job: Publish to PyPI
    publish:
        name: Publish to PyPI
        runs-on: ubuntu-latest
        needs: [test, build]
        if: startsWith(github.ref, 'refs/tags/')
        environment:
            name: pypi
            url: https://pypi.org/project/logxide/
        permissions:
            id-token: write # For trusted publishing

        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: dist/
                  merge-multiple: true

            - name: List artifacts
              run: ls -la dist/

            - name: Publish to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  packages-dir: dist/
                  verbose: true
                  print-hash: true

    # Fifth job: Create GitHub release
    release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        needs: [publish]
        if: startsWith(github.ref, 'refs/tags/')
        permissions:
            contents: write

        steps:
            - uses: actions/checkout@v4

            - name: Get version from tag
              id: get_version
              run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: dist/
                  merge-multiple: true

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  name: LogXide v${{ steps.get_version.outputs.VERSION }}
                  draft: false
                  prerelease: false
                  generate_release_notes: true
                  files: |
                      dist/*.whl
                  body: |
                      ## LogXide v${{ steps.get_version.outputs.VERSION }}

                      High-performance, Rust-powered drop-in replacement for Python's logging module.

                      ### Installation

                      ```bash
                      pip install logxide==${{ steps.get_version.outputs.VERSION }}
                      ```

                      ### Quick Start

                      ```python
                      import logxide
                      logxide.install()

                      import logging
                      logging.basicConfig(level=logging.INFO)
                      logger = logging.getLogger(__name__)
                      logger.info("Hello from LogXide!")
                      ```

                      See the [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed release notes.
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
